// Ques 1. Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

// The first node is considered odd, and the second node is even, and so on.

// Note that the relative order inside both the even and odd groups should remain as it was in the input.

// You must solve the problem in O(1) extra space complexity and O(n) time complexity.

// Input: head = [1,2,3,4,5]
// Output: [1,3,5,2,4]. Note :- Take all the required input from user.
#include<bits/stdc++.h>
using namespace std;
struct node{
    int data;
    node* next;
};
void traverse(node*& head,int value){
    node* newnode=new node();
    newnode->data=value;
    newnode->next=nullptr;
    if(head==nullptr){
        head=newnode;
    }else{
        node* temp=head;
        while(temp->next!=nullptr){
            temp=temp->next;
    }
    temp->next=newnode;
    }
}
void evenodd(node* head,node*& evenlist,node*& oddlist){
    while(head!=nullptr){
        if(head->data%2==0){
            traverse(evenlist,head->data);
        }else{
            traverse(oddlist,head->data);
        }
        head=head->next;
    }
}
void printarr(node* head){
    node* temp=head;
    while(temp!=nullptr){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main(){
    node* head=nullptr;
    node* evenlist=nullptr;
    node* oddlist=nullptr;
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        int value;
        cin>>value;
        traverse(head,value);
    }
    evenodd(head,evenlist,oddlist);
    printarr(oddlist);
    printarr(evenlist);
}
