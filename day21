// Ques 1: Write C++ program to create a doubly linkedlist and insert a node at any position . Input Linkedlist: 2<->4<->5 ,p = 2, x = 6 Output: 2 4 5 6, Explanation: p = 2, and x = 6. So, 6 is
// inserted after p, i.e, at position 3
// (0-based indexing).

#include<iostream>
using namespace std;
struct node{
    int data;
    node* next;
    node* prev;
};
void Traverse(node*& head,node*& tail,int value){
    node* newnode=new node();
    newnode->data=value;
    newnode->next=nullptr;
    newnode->prev=nullptr;
    if(head==nullptr){
        head=newnode;
        tail=newnode;
    }else{
        tail->next=newnode;
        newnode->prev=tail;
        tail=newnode;
    }
}
node* Insert_Pos(node* head,node* tail,int pos,int ele){
    node* newnode=new node();
    newnode->data=ele;
    newnode->next=nullptr;
    newnode->prev=nullptr;
    if(pos==0){
        newnode->next=head;
        if(head!=nullptr){
            head->prev=newnode;
        }
        head=newnode;
        return head;
    }
    node* temp=head;
    for(int i=0;i<pos-1 && temp!=nullptr;i++){
        temp=temp->next;
    }
    if(temp==nullptr){
        cout<<"Position out of Bound...";
        return head;
    }
    if(temp->next==nullptr){
        temp->next=newnode;
        newnode->prev=temp;
        return head;
    }
    newnode->next=temp->next;
    newnode->prev=temp;
    temp->next->prev=newnode;
    temp->next=newnode;
    return head;
}
void Printlist(node* head){
    node* temp=head;
    while(temp!=nullptr){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
void freememory(node* head){
    while(head!=nullptr){
        node* temp=head;
        head=head->next;
        delete temp;
    }
}
int main(){
    node* head=nullptr;
    node* tail=nullptr;
    int n;
    cin>>n;
    int value;
    for(int i=0;i<n;i++){
        cin>>value;
        Traverse(head,tail,value);
    }
    int pos;
    cin>>pos;
    int ele;
    cin>>ele;
    head=Insert_Pos(head,tail,pos,ele);
    Printlist(head);
    freememory(head);
}

// Ques 2: Write C++ program that detect the cycle inside a given linkedlist if their is any cycle present then print true otherwise print false. Input: head = [3,2,0,-4], pos = 1. Output: true. Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

#include<iostream>
using namespace std;

// Definition for singly-linked list node.
struct node {
    int data;
    node* next;
};
void insertNode(node*& head, int value) {
    node* newNode = new node();
    newNode->data = value;
    newNode->next = nullptr;

    if (head == nullptr) {
        head = newNode;
    } else {
        node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}
void createCycle(node* head, int pos) {
    if (pos == -1) return; 

    node* temp = head;
    node* cycleNode = nullptr;
    int index = 0;
    while (temp->next != nullptr) {
        if (index == pos) {
            cycleNode = temp; 
        }
        temp = temp->next;
        index++;
    }
    temp->next = cycleNode;
}
bool hasCycle(node* head) {
    if (head == nullptr) return false;

    node* slow = head;
    node* fast = head; 

    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next; 
        fast = fast->next->next; 

        if (slow == fast) { 
            return true;
        }
    }
    return false; 
}

int main() {
    node* head = nullptr;
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        insertNode(head, value);
    }
    int pos;
    cin >> pos;
    createCycle(head, pos);
    if (hasCycle(head)) {
        cout << "true";
    } else {
        cout << "false" << endl;  // No cycle
    }

    return 0;
}
