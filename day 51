//Ques 1.Write a function to find the maximum depth of a node 
//that matches a given value in a binary tree. If the value is not found, return -1.Input:

#include<bits/stdc++.h>
using namespace std;
struct node{
  int data;
  node* left;
  node* right;
};
node* createnode(int value){
  node* newnode=new node();
  newnode->data=value;
  newnode->left=nullptr;
  newnode->right=nullptr;
  return newnode;
}
node* insert(node* root,int value){
  if(root==nullptr){
    return createnode(value);
  }else if(value<root->data){
    root->left=insert(root->left,value);
  }else if(value>root->data){
    root->right=insert(root->right,value);
  }
  return root;
}
int finddepth(node* root,int ele,int depth){
  if(root==nullptr){
    return -1;
  }
  if(root->data==ele){
    return depth;
  }
  int leftdepth=finddepth(root->left,ele,depth+1);
  if(leftdepth!=-1){
    return leftdepth;
  }
  return finddepth(root->right,ele,depth+1);
  
}
void inorder(node* root){
  if(root==nullptr){
    return;
  }
  inorder(root->left);
  cout<<root->data<<" ";
  inorder(root->right);
}
int main(){
  node* root=nullptr;
  int n;
  cin>>n;
  for(int i=0;i<n;i++){
    int value;
    cin>>value;
    root=insert(root,value);
  }
  int ele;
  cin>>ele;
  int depth=finddepth(root,ele,0);
  if(depth!=-1){
    cout<<"Depth of node "<<ele<<" is "<<depth<<endl;
  }else{
    cout<<"Element not found"<<endl;
  }
  inorder(root);
}

// Write a function to find the value in a Binary Search Tree (BST) that is closest to a given target. Input:
// 10
// / \
// 5 15
// / \
// 3 7
// Target: 6
// Output: 5

#include<bits/stdc++.h>
using namespace std;
struct node{
  int data;
  node* left;
  node* right;
};
node* createnode(int value){
  node* newnode=new node();
  newnode->data=value;
  newnode->left=nullptr;
  newnode->right=nullptr;
  return newnode;
}
node* insert(node* root,int value){
  if(root==nullptr){
    return createnode(value);
  }else if(value<root->data){
    root->left=insert(root->left,value);
  }else if(value>root->data){
    root->right=insert(root->right,value);
  }
  return root;
}
int findnearest(node* root,int target,int nearestvalue){
  if(root==nullptr){
    return nearestvalue;
  }
  if(abs(root->data-target)< abs(nearestvalue-target)){
    nearestvalue=root->data;
  }
  if(target<root->data){
    return findnearest(root->left,target,nearestvalue);
  }else{
    return findnearest(root->right,target,nearestvalue);
  }
}
int main(){
  node* root=nullptr;
  int n;
  cin>>n;
  for(int i=0;i<n;i++){
    int value;
    cin>>value;
    root=insert(root,value);
  }
  int target;
  cin>>target;
  
  int result=findnearest(root,target,root->data);
  cout<<"The nearest value to the node "<<target<<" is: "<<result<<endl;
  
}
